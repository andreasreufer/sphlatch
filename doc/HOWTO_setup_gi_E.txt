required are
- C++ compiler with OpenMP, e.g. gcc  -> export CXX=mpicxx
- FORTRAN compiler, e.g. gfortran    -> export FC=gfortran
- blitz++ library (headers only)
- BOOST (for certain tools)
- HDF5 library
- python with pytables (HDF5)

recommended are
- numpy, pytables
- matplotlib for plots & viz
- octave with HDF5 support


Steps 1-7 describe how to produce a relaxed 3D SPH sphee with a given mass and composition. For a collision usually two such bodies are required: The impactor and the target

1. Produce a full sphere with the desired number of particles
$ cd sphlatch/initials/vanilla_sphere/
$ make
$ vanilla_sphere sphere.h5part <nop>
 
2. Produce a pseudo 1D structure with the desired composition
$ cd strucs/
Adapt "initProfile.py" with the desired mass, composition and filename. If a non-CGS system is to be used, adapt the gravitational constant G
$ ./initProfile.py
-> a initial structure file in HDF5 format for the 1D Lagrange code has been been produced


3. compile the spherical 1D Lagrange code
$ cd sphlatch/initials/lagrange_sphere1D
$ make
-> lagrange_sphere1D_A


4. Relax the 1D structure with the 1D Lagrange code
A fricition term in the 1D Lagrange code damps the initial motions: a_fric = (1./t_fric)*v_r
Choose a t_fric as a multiple of the free fall time. By integrating the 1D structure a multiple of t_fric, radial velocities get sufficiently damped (t_stop >> t_fric). Note that in the same directory the code runs, aneos_tables.hdf5, aneos.input and ANEOS.QUARTZ have to be present (can be a softlink). The 1D Lagrange code is executed with the following arguments 
$ lagrange_sphere1D <infile> <outfile> <stoptime> <fric>

<outfile> will then contain a sufficiently relaxed structure.

If octave with HDF5 is present, the structure can easily be plotted with
$ octave
oct$ filename = "<outfile>"
oct$ plotprofile


5. The full sphere from step 1 ("sphere.h5part") is now being "flavoured" with the desired 1D profile from step 4 ("struc.hdf5"):
$ cd sphlatch/flavour_sphere
$ make flavH
$ flavour_sphere_H sphere.h5part struc.hdf5
-> sphere.h5part is now an unrelaxed, self-gravitating 3D SPH body with the desired mass and profile

6. Relax the 3D SPH body
Compile the SPH code with friciton and integrated entropy (AV terms for the entropy are missing, so entropy stays constant), e.g. variant "GCSHSm_F" (self-gravity, stadard SPH with density sum, integrated entropy, M-ANEOS with tables, no clump search, friction). Friction works as in the 1D Lagrange code.
$ make simple_sph_GCSHSm_F
As for the 1D profile, it is recommended to integrate the 3D body several times t_fric. It's good practice to extract a dump every t_fric in order to monitor radial velocities:
$ simple_sph_GCSHSm_F sphere.h5part <t_fric> <t_stop> dump <nothreads>
As before: t_stop >> t_fric and <nothreads> should be about 1.5x the amount of available CPU cores.

If octave is present, plotprofile.m can be used to analyze a dump for it's radial velocities:
$ octave
oct$ filename = "dump....."
oct$ plotprofile
(may take a long time, as all particles are being plotted as individual points)

Some times individual particles are being ejected with a high velocity out of the body (SPH anomaly). Such particles can be removed with "cut_sphere", which removes particles from a dump file which either surpass a certain radius from the bodies center or a certain relative radial velocity.
$ cd sphlatch/tools/h5part_tools
$ make cutSphere
<rmax> denotes the maximum radius and <vmax> the maximum relative radial velocity for particles to keep
$ cut_sphere <input dump> <output dump> <rmax> <vmax>

The relaxed body is now ready. To actually give the two initial bodies the necessary initial velocities and positions and then combine them into a single dump file, use the h5part_tools:

B7. compile the h5part tools
$ cd sphlatch/tools
$ make

B8. The bodies from steps 1-7 now have a center of mass in their origin and an initial total velocity of zero. With h5part_displace, whole bodies can be displaced with a position and velocity vector. Particle IDs can be displaced as well, in order to avoid duplicate IDs (although that's not a problem per se):
$ h5part_displace -i <dump> --pos=[dx,dy,dz] --vel=[dvx, dvy, dvz] --id dID

B9. To combine two dump files, use h5part_combine_A. The particles from <dumpA> will be put first in the <outputDump>, followed by <dumpB>:
$ h5part_combine__ <dumpA> <dumpB> <outputDump>

B10. Attributes like time can be written with the following tool:
$ h5part_writeattr -k time -v <t0> -i <dumpfile>

B11. The collision simulation can now be started similarly as in step 6, except that a code variant without friction has to be used. Clumps search might be helpful though. <initialdump> is the file name of the initial dump, output dumps will be saved at multiples of <t_save>, the simulation will be stopped at <t_stop>. Output dump files will have the prefix <dump_prefix>, use e.g. "dump". <nothreads> denotes the amount of OpenMP threads to be run. Use about 1.5x the amount of available CPU cores.
$ simple_sph_GCSHUmD_ <initialdump> <t_save> <t_stop> <dump_prefix> <nothreads>


